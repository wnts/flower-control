
atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800116  00800116  000003c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5e  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055f  00000000  00000000  0000134a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000473  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000670  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000326  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000280e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  9e:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sysclock_get>:
#include "clock.h"

uint32_t sysclock_get(void)
{
	return 16000000;
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	74 e2       	ldi	r23, 0x24	; 36
  aa:	84 ef       	ldi	r24, 0xF4	; 244
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	08 95       	ret

000000b0 <log_putchar>:
#include "log.h"
#include "uart.h"

static int log_putchar(char c, FILE *stream)
{
	uart_putchar(UART0, c);
  b0:	68 2f       	mov	r22, r24
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
	return 0;
}
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <log_init>:

int log_init(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	28 97       	sbiw	r28, 0x08	; 8
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
	static FILE uart_stdout = FDEV_SETUP_STREAM(log_putchar, NULL, _FDEV_SETUP_WRITE);	
	struct UartConfig uart_config = { .baudrate = 9600,
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	ee e0       	ldi	r30, 0x0E	; 14
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	de 01       	movw	r26, r28
  da:	11 96       	adiw	r26, 0x01	; 1
  dc:	01 90       	ld	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	8a 95       	dec	r24
  e2:	e1 f7       	brne	.-8      	; 0xdc <log_init+0x1e>
									  .mode = ASYNC,
									  .stop_bits = STOPBITS1,
									  .char_size = UART8B,
									  .parity = DISABLED };
	if(!uart_config_set(UART0, &uart_config))
  e4:	be 01       	movw	r22, r28
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_config_set>
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	41 f0       	breq	.+16     	; 0x104 <log_init+0x46>
		return 0;
	stdout = &uart_stdout;
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	90 93 24 01 	sts	0x0124, r25
  fc:	80 93 23 01 	sts	0x0123, r24
	return 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
}
 104:	28 96       	adiw	r28, 0x08	; 8
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <__vector_1>:
#define INT_NONE		0
#define INT_SEC			1
#define INT_NRF			2

ISR(INT0_vect)
{	
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	g_int = INT_NRF;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 20 01 	sts	0x0120, r25
 12c:	80 93 1f 01 	sts	0x011F, r24
	GPIO_PIN_SET(B, 1, 0);
 130:	29 98       	cbi	0x05, 1	; 5
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
	static unsigned char ctr = 0;
	ctr++;
 14e:	80 91 16 01 	lds	r24, 0x0116
 152:	8f 5f       	subi	r24, 0xFF	; 255
	if(ctr == 125)
 154:	8d 37       	cpi	r24, 0x7D	; 125
 156:	19 f0       	breq	.+6      	; 0x15e <__vector_14+0x1e>
}

ISR(TIMER0_COMPA_vect)
{
	static unsigned char ctr = 0;
	ctr++;
 158:	80 93 16 01 	sts	0x0116, r24
 15c:	08 c0       	rjmp	.+16     	; 0x16e <__vector_14+0x2e>
	if(ctr == 125)
	{
		ctr = 0;
 15e:	10 92 16 01 	sts	0x0116, r1
		g_int = INT_SEC;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	90 93 20 01 	sts	0x0120, r25
 16a:	80 93 1f 01 	sts	0x011F, r24
	}
}
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <main>:
	adc_input_set(ADC0);
}

int main(void)
{
	log_init();
 17c:	0e 94 5f 00 	call	0xbe	; 0xbe <log_init>
#define ICS_EDGE_FALLING	2
#define ICS_EDGE_RISING		3

inline void interrupt_global_enable(void)
{
	SREG |= 1 << 7;
 180:	8f b7       	in	r24, 0x3f	; 63
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8f bf       	out	0x3f, r24	; 63
	TOM16_NORMAL
};

inline int t1_clk_src_set(enum TimerClkSrc clk_src)
{
	TCCR1B = (TCCR1B & ~(7 << CS10)) | clk_src;
 186:	e1 e8       	ldi	r30, 0x81	; 129
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 7f       	andi	r24, 0xF8	; 248
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 83       	st	Z, r24
	return TCCR1B & (7 << CS10);
}

inline int t1_opmode_set(enum Timer16Opmode opmode)
{
	TCCR1A = (TCCR1A & ~(3 << WGM10)) | (opmode & 3);
 192:	a0 e8       	ldi	r26, 0x80	; 128
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	8c 91       	ld	r24, X
 198:	8c 7f       	andi	r24, 0xFC	; 252
 19a:	8c 93       	st	X, r24
	TCCR1B = TCCR1B & ~(3 << WGM02) | opmode >> 2;
 19c:	80 81       	ld	r24, Z
 19e:	87 7e       	andi	r24, 0xE7	; 231
 1a0:	80 83       	st	Z, r24
	t1_clk_src_set(TCS_NONE);
}

inline void t1_input_capture_edge_set(enum T1InputCapEdge edge)
{	
	TCCR1B = (TCCR1B & ~(1 << ICES1)) | edge;
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 7b       	andi	r24, 0xBF	; 191
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	80 83       	st	Z, r24
}

inline void t1_input_capture_int_enable(void)
{	
	TIMSK1 |= 1 << ICIE1;	
 1aa:	ef e6       	ldi	r30, 0x6F	; 111
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	80 83       	st	Z, r24

static enum TimerClkSrc saved_clk_src = TCS_NONE;

inline int t0_clk_src_set(enum TimerClkSrc clk_src)
{
	TCCR0B = (TCCR0B & ~(7 << CS00)) | clk_src;
 1b4:	85 b5       	in	r24, 0x25	; 37
 1b6:	88 7f       	andi	r24, 0xF8	; 248
 1b8:	85 bd       	out	0x25, r24	; 37
	t1_clk_src_set(TCS_IO_CLK);
	t1_opmode_set(TOM16_NORMAL);
	t1_input_capture_edge_set(CPE_RISING);
	t1_input_capture_int_enable();
	t1_enable();
	GPIO_PIN_DIR_SET(D, 7, DIR_OUTPUT);
 1ba:	57 9a       	sbi	0x0a, 7	; 10
	GPIO_PIN_SET(D, 7, 1);
 1bc:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x44>
 1c4:	00 00       	nop
	_delay_us(10);
	GPIO_PIN_SET(D, 7, 0);
 1c6:	5f 98       	cbi	0x0b, 7	; 11
	interrupt_global_enable();	
	hcsr04_get_us();		
}
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	08 95       	ret

000001ce <uart_config_set>:

static struct UartConfig s_config;


int uart_config_set(enum Uart uart, struct UartConfig * uart_config)
{
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	eb 01       	movw	r28, r22
	memcpy(&s_config, uart_config, sizeof(s_config));
 1d8:	98 e0       	ldi	r25, 0x08	; 8
 1da:	fb 01       	movw	r30, r22
 1dc:	a7 e1       	ldi	r26, 0x17	; 23
 1de:	b1 e0       	ldi	r27, 0x01	; 1
 1e0:	01 90       	ld	r0, Z+
 1e2:	0d 92       	st	X+, r0
 1e4:	9a 95       	dec	r25
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <uart_config_set+0x12>
	if(uart == UART0)
 1e8:	81 11       	cpse	r24, r1
 1ea:	5a c0       	rjmp	.+180    	; 0x2a0 <uart_config_set+0xd2>
	{		
		// no double transmission speed
		UCSR0A &= ~(1 << U2X0);
 1ec:	e0 ec       	ldi	r30, 0xC0	; 192
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8d 7f       	andi	r24, 0xFD	; 253
 1f4:	80 83       	st	Z, r24
		// no multiprocessor mode
		UCSR0A &= ~(1 << MPCM0);
 1f6:	80 81       	ld	r24, Z
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
 1fa:	80 83       	st	Z, r24
		// enable tx and rx
		UCSR0B |= (1 << RXEN0);
 1fc:	e1 ec       	ldi	r30, 0xC1	; 193
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 61       	ori	r24, 0x10	; 16
 204:	80 83       	st	Z, r24
		UCSR0B |= (1 << TXEN0);
 206:	80 81       	ld	r24, Z
 208:	88 60       	ori	r24, 0x08	; 8
 20a:	80 83       	st	Z, r24
		// set mode
		UCSR0C = (UCSR0C & ~(3 << UMSEL01)) | (uart_config->mode << UMSEL01);
 20c:	a2 ec       	ldi	r26, 0xC2	; 194
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	8c 91       	ld	r24, X
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	90 fb       	bst	r25, 0
 216:	87 f9       	bld	r24, 7
 218:	8c 93       	st	X, r24
		// set parity
		UCSR0C = (UCSR0C & ~(3 << UPM01)) | (uart_config->parity << UPM01);
 21a:	2c 91       	ld	r18, X
 21c:	9f 81       	ldd	r25, Y+7	; 0x07
 21e:	30 e2       	ldi	r19, 0x20	; 32
 220:	93 9f       	mul	r25, r19
 222:	c0 01       	movw	r24, r0
 224:	11 24       	eor	r1, r1
 226:	92 2f       	mov	r25, r18
 228:	9f 79       	andi	r25, 0x9F	; 159
 22a:	89 2b       	or	r24, r25
 22c:	8c 93       	st	X, r24
		// clock polarity bit
		UCSR0C &= ~(1 << UCPOL0);		
 22e:	8c 91       	ld	r24, X
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	8c 93       	st	X, r24
		// set stop bits
		UCSR0C = (UCSR0C & ~(1 << USBS0)) | (uart_config->stop_bits << USBS0);
 234:	8c 91       	ld	r24, X
 236:	9d 81       	ldd	r25, Y+5	; 0x05
 238:	99 0f       	add	r25, r25
 23a:	99 0f       	add	r25, r25
 23c:	99 0f       	add	r25, r25
 23e:	87 7f       	andi	r24, 0xF7	; 247
 240:	89 2b       	or	r24, r25
 242:	8c 93       	st	X, r24
		// set character size
		UCSR0B = (UCSR0B & ~(1 << UCSZ02)) | (((uart_config->char_size >> 2) & 0xFE) << UCSZ02);
 244:	80 81       	ld	r24, Z
 246:	9e 81       	ldd	r25, Y+6	; 0x06
 248:	98 7f       	andi	r25, 0xF8	; 248
 24a:	8b 7f       	andi	r24, 0xFB	; 251
 24c:	89 2b       	or	r24, r25
 24e:	80 83       	st	Z, r24
		
		// set baud rate
		uint16_t br = 0;		
		switch(uart_config->mode)		
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	81 11       	cpse	r24, r1
 254:	28 c0       	rjmp	.+80     	; 0x2a6 <uart_config_set+0xd8>
		{			
			case ASYNC:
				br = sysclock_get() / (16 * uart_config->baudrate) - 1;
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <sysclock_get>
 25a:	08 81       	ld	r16, Y
 25c:	19 81       	ldd	r17, Y+1	; 0x01
 25e:	2a 81       	ldd	r18, Y+2	; 0x02
 260:	3b 81       	ldd	r19, Y+3	; 0x03
 262:	00 0f       	add	r16, r16
 264:	11 1f       	adc	r17, r17
 266:	22 1f       	adc	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	00 0f       	add	r16, r16
 26c:	11 1f       	adc	r17, r17
 26e:	22 1f       	adc	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	a9 01       	movw	r20, r18
 274:	98 01       	movw	r18, r16
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	44 1f       	adc	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	44 1f       	adc	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__udivmodsi4>
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	31 09       	sbc	r19, r1
			break;
			default:
				return 0;
			break;			
		}		
		UBRR0L = br & 0xFF;
 28e:	20 93 c4 00 	sts	0x00C4, r18
		UBRR0H = (br >> 8) & 0x0F;
 292:	83 2f       	mov	r24, r19
 294:	8f 70       	andi	r24, 0x0F	; 15
 296:	80 93 c5 00 	sts	0x00C5, r24
	else
	{
		return -1;
	}

	return 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <uart_config_set+0xdc>
		UBRR0L = br & 0xFF;
		UBRR0H = (br >> 8) & 0x0F;
	}
	else
	{
		return -1;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <uart_config_set+0xdc>
		{			
			case ASYNC:
				br = sysclock_get() / (16 * uart_config->baudrate) - 1;
			break;
			default:
				return 0;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
	{
		return -1;
	}

	return 1;
};
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <uart_putchar>:

void uart_putchar(enum Uart uart, char c)
{
	switch(uart)
 2b4:	81 11       	cpse	r24, r1
 2b6:	0c c0       	rjmp	.+24     	; 0x2d0 <uart_putchar+0x1c>
	{
		case UART0:
			// wait until data register is empty
			while((UCSR0A & (1 << UDRE0)) == 0)
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	85 ff       	sbrs	r24, 5
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <uart_putchar+0x8>
				;
			UDR0 = c;
 2c2:	60 93 c6 00 	sts	0x00C6, r22
			// wait for transmit to complete
			while(!(UCSR0A & (1 << TXC0)))
 2c6:	e0 ec       	ldi	r30, 0xC0	; 192
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	86 ff       	sbrs	r24, 6
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <uart_putchar+0x16>
 2d0:	08 95       	ret

000002d2 <__udivmodsi4>:
 2d2:	a1 e2       	ldi	r26, 0x21	; 33
 2d4:	1a 2e       	mov	r1, r26
 2d6:	aa 1b       	sub	r26, r26
 2d8:	bb 1b       	sub	r27, r27
 2da:	fd 01       	movw	r30, r26
 2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <__udivmodsi4_ep>

000002de <__udivmodsi4_loop>:
 2de:	aa 1f       	adc	r26, r26
 2e0:	bb 1f       	adc	r27, r27
 2e2:	ee 1f       	adc	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	a2 17       	cp	r26, r18
 2e8:	b3 07       	cpc	r27, r19
 2ea:	e4 07       	cpc	r30, r20
 2ec:	f5 07       	cpc	r31, r21
 2ee:	20 f0       	brcs	.+8      	; 0x2f8 <__udivmodsi4_ep>
 2f0:	a2 1b       	sub	r26, r18
 2f2:	b3 0b       	sbc	r27, r19
 2f4:	e4 0b       	sbc	r30, r20
 2f6:	f5 0b       	sbc	r31, r21

000002f8 <__udivmodsi4_ep>:
 2f8:	66 1f       	adc	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	88 1f       	adc	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	1a 94       	dec	r1
 302:	69 f7       	brne	.-38     	; 0x2de <__udivmodsi4_loop>
 304:	60 95       	com	r22
 306:	70 95       	com	r23
 308:	80 95       	com	r24
 30a:	90 95       	com	r25
 30c:	9b 01       	movw	r18, r22
 30e:	ac 01       	movw	r20, r24
 310:	bd 01       	movw	r22, r26
 312:	cf 01       	movw	r24, r30
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
